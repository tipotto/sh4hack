;(point)
;(read-only-mode)
;(read-only-mode 0)
;(read-only-mode 1)
;(read-only-mode 'toggle)
;(delete-trailing-whitespace 1 8)

;(buffer-substring-no-properties 1 8)

;(defun term-kill ()
;  (interactive)
;  (let* ((beg (point))
;	 (end (point-max))
;	 (text (buffer-substring-no-properties beg end)))
;    (message "killed text: %s" text)
;    (kill-new text)
;    (term-send-raw)))

;(defun replace-in-string (what with in)
;  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))
;
;(message "killed text: %s!!!" "unko\n")
;(regexp-quote "[ \n]+$")
;(replace-regexp-in-string "\n" "" (replace-regexp-in-string "\s+$" "" "unko      
;    
;    "))
;(message "modified text: %s!!!" (replace-in-string "[\s]+$" "" "unko
;         "))

(defun buffer-plain-substring (beg end)
  (interactive)
  (let ((text (filter-buffer-substring beg end)))
;  (let ((text (buffer-substring-no-properties beg end)))
    (replace-regexp-in-string "\n" "" (replace-regexp-in-string "\s+$" "" text))))

(defun term-kill ()
  (interactive)
  (let* ((beg (point))
	 (end (point-max))
	 (text (buffer-plain-substring beg end)))
    (message "killed text: %s!!!" text)

    (if (eq last-command 'term-kill)
	(kill-append text nil)
      (kill-new text)
;      (setq kill-ring (cons text kill-ring))

      (if (> (length kill-ring) kill-ring-max)
	  (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))

    (setq this-command 'term-kill)
    (setq kill-ring-yank-pointer kill-ring)
    (term-send-raw)))

;(define-key term-raw-map (kbd "C-w") 'term-send-raw)
(define-key term-raw-map (kbd "C-k") 'term-kill)
(lookup-key term-raw-map (kbd "C-k"))

(defun term-kill-region (beg end)
  (interactive "r")
  (let ((use-empty-active-region nil)
	(text (buffer-plain-substring beg end)))
    (message "beg-point: %s" beg)
    (message "end-point: %s" end)
    (message "killed text: %s!!!" text)
    (activate-mark)
    (if (not (use-region-p))
	(message "region is NOT active...")
      (kill-new text)
      (if (> (length kill-ring) kill-ring-max)
	  (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
      (setq this-command 'term-kill-region)
      (setq kill-ring-yank-pointer kill-ring)
      (term-send-raw)))

(define-key term-raw-map (kbd "C-w") 'term-send-raw)
(define-key term-raw-map (kbd "C-w") 'term-kill-region)
(lookup-key term-raw-map (kbd "C-w"))

;(defun term-kill ()
;  (interactive)
;  (let ((inhibit-point-motion-hooks t)
;	(beg-point (point))
;	(end-point (point-max)))
;    (read-only-mode 0) ;; disable read-only mode
;    (delete-trailing-whitespace beg-point end-point)
;    (replace-string "\n" "" nil beg-point end-point)
;    (read-only-mode) ;; enable read-only mode
;    (kill-ring-save beg-point end-point)
;    (term-send-raw)))

;(defun term-kill-region ()
;  (interactive)
;;  (setq delete-selection-mode nil)
;  (let ((deactivate-mark nil)
;	(transient-mark-mode t)
;	(beg-point (mark))
;	(end-point (point)))
;    (message "beg-point: %s" beg-point)
;    (message "end-point: %s" end-point)
;    (delete-selection-mode)
;;    (kill-ring-save beg-point end-point)
;;    (set-mark beg-point)
;;    (goto-char end-point)
;    (read-only-mode 0) ;; disable read-only mode
;    (delete-backward-char 1 t)
;;    (kill-region beg-point end-point)
;    (read-only-mode) ;; enable read-only mode
;    ))

;(defun term-kill-region ()
;  (interactive)
;  (message "term-kill-region: 2")
;;    (kill-ring-save nil nil t)
;;    (if (region-active-p)
;  (if (use-region-p)
;      (progn (read-only-mode 0)
;             (delete-backward-char 1 t)
;             (read-only-mode))
;    (message "region is NOT active...")))

;(transient-mark-mode 'toggle)

;(defun term-kill-region (beg end)
;  (interactive "r")
;  (let ((deactivate-mark nil)
;	(transient-mark-mode t)
;	(use-empty-active-region nil)
;	(beg-point (mark))
;	(end-point (point)))
;;    (kill-ring-save nil nil t)
;    (if (region-active-p)
;;    (if (use-region-p)
;	(progn (delete-selection-mode)
;	       (read-only-mode 0)
;               (delete-backward-char 1 t)
;               (read-only-mode))
;      (message "region is NOT active..."))))
;    (set-mark (mark))
;    (goto-char (point))
    
  ;  (delete-region (mark) (point))
  ;  (kill-region (mark) (point))

;(defun term-kill-region ()
;  (interactive)
;  (kill-ring-save nil nil t)
;  (set-mark (mark))
;  (goto-char (point))
;  (read-only-mode 0) ;; disable read-only mode
;;  (delete-region (mark) (point))
;;  (kill-region (mark) (point))
;
;  (delete-backward-char 1)
;  (read-only-mode) ;; enable read-only mode
;  )
;  (term-send-raw))

;(defun term-kill ()
;  (interactive)
;  (let ((inhibit-point-motion-hooks t)
;	(beg-point (point))
;	(end-point (point-max)))
;;    (message "beg-point: %s" beg-point)
;;    (message "end-point: %s" end-point)
;;    (message "max-point: %s" (point-max))
;    (read-only-mode 0)
;;    (delete-trailing-whitespace)
;    (delete-trailing-whitespace beg-point end-point)
;    (read-only-mode 1)
;;    (fixup-whitespace)
;    (kill-ring-save beg-point end-point)
;    (term-send-raw)
;;    (term-line-mode)
;;    (read-only-mode)
;;    (delete-region beg-point end-point)
;    (read-only-mode)
;    (term-char-mode)
;    ))

(defun send-raw-keys ()
  (interactive)
  (message "emacs-keys: raw")
  (define-key term-raw-map (kbd "C-x") 'term-send-raw)
  (define-key term-raw-map (kbd "C-z") 'term-send-raw))

(defun back-to-default ()
  (interactive)
  (message "emacs-keys: default")
  (define-key term-raw-map (kbd "C-x") 'Control-X-prefix)
  (define-key term-raw-map (kbd "C-z") 'suspend-frame))

(defun is-term-mode ()
  (interactive)
  (string= major-mode 'term-mode))

(defun toggle-emacs-keys ()
  (interactive)
  (when (is-term-mode)
    (if (string= 'Control-X-prefix (lookup-key term-raw-map (kbd "C-x")))
	(send-raw-keys)
      (back-to-default))))

;; Newline(\n) after the below first quotation is necessary.
;; "Not enough arguments for format string" error occurs otherwise.
(defhydra sh4hack-menu (:exit t :color pink :hint nil)
  "

 ######  ##     ## ##        ##     ##    ###     ######  ##    ## 
##    ## ##     ## ##    ##  ##     ##   ## ##   ##    ## ##   ##  
##       ##     ## ##    ##  ##     ##  ##   ##  ##       ##  ##   
 ######  ######### ##    ##  ######### ##     ## ##       #####    
      ## ##     ## ######### ##     ## ######### ##       ##  ##   
##    ## ##     ##       ##  ##     ## ##     ## ##    ## ##   ##  
 ######  ##     ##       ##  ##     ## ##     ##  ######  ##    ## 

               ^Metasploit^               |              ^Shell^               |      ^Others        
^^^^^^^^----------------------------------------------------------------------------------------------
       ^Linux^       |       ^Windows^      |       ^SSH^      |     ^Normal^      |      ******
^^^^^^^^----------------------------------------------------------------------------------------------
 _l_: x64-staged     |  _w_: x64-staged     |  _p_: password   |  _n_: netcat      |  _i_: info
 _L_: x64-stageless  |  _W_: x64-stageless  |  _P_: publickey  |  _s_: socat       |  _I_: inspect
 _m_: x86-staged     |  _x_: x86-staged     | ^ ^              | ^ ^               |  _r_: register
 _M_: x86-stageless  |  _X_: x86-stageless  | ^ ^              | ^ ^               |  _e_: edit
 ^ ^                 | ^ ^                  | ^ ^              | ^ ^               |  _q_: quit

"
  ("l" (msf-linux "x64" "staged"))
  ("L" (msf-linux "x64" "stageless"))
  ("m" (msf-linux "x86" "staged"))
  ("M" (msf-linux "x86" "stageless"))
  ("w" nil)
  ("W" nil)
  ("x" nil)
  ("X" nil)
  ("p" auth-with-password)
  ("P" auth-with-public-key)
  ("n" upgrade-netcat)
  ("s" connect-with-socat)
  ("i" get-info)
  ("I" inspect-server)
  ("r" register-info)
  ("e" edit-remote-file)
  ("q" nil))

(global-set-key (kbd "C-c s h") 'sh4hack-menu/body)
(global-set-key (kbd "C-;") 'toggle-emacs-keys)

(provide 'sh4hack-keybinds)
