(defun buffer-plain-substring (beg end)
  (interactive)
  (let ((text (filter-buffer-substring beg end)))
    (message "text1: %s" text)
    (replace-regexp-in-string "\n" "" (car (split-string text "  ")))))

(defun buffer-extract-substring (beg end)
  (interactive)
  (let* ((a (filter-buffer-substring beg end))
         (b (car (last (split-string a "\n"))))	 
	 (c (cadr (split-string b "@kali:")))
	 (d (cadr (split-string c "$ "))))
    (message "b: %s" b)
    (message "c: %s" c)
    (message "d: %s" d)
    (replace-regexp-in-string "\n" "" (car (split-string d "  ")))))

(defun extract-current-filepath (beg end)
  (interactive)
  (let* ((a (filter-buffer-substring beg end))
         (b (car (last (split-string a "\n"))))	 
	 (c (cadr (split-string b "@kali:")))
	 (d (car (split-string c "$ "))))
    (message "b: %s" b)
    (message "c: %s" c)
    (message "d: %s" d)
    (replace-regexp-in-string "\n" "" d)))

;(defun term-delete-word ()
;  (interactive)
;  (term-send-raw-string "\C-d"))
;
;(defun term-delete-backward-word ()
;  (interactive)
;  (term-send-raw-string "\C-h"))
;
;(define-key term-raw-map (kbd "C-d") 'term-delete-word)
;(define-key term-raw-map (kbd "C-h") 'term-delete-backward-word)

(defun term-kill-line ()
  (interactive)
  (let* ((beg (point))
	 (end (point-max))
	 (text (buffer-plain-substring beg end)))
    (message "killed text: %s!!!" text)

    (if (eq last-command 'term-kill-line)
	(kill-append text nil)
      (kill-new text)
      (if (> (length kill-ring) kill-ring-max)
	  (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
    (setq this-command 'term-kill-line)
    (setq kill-ring-yank-pointer kill-ring)
    (term-send-raw)))

(defun term-backward-kill-line ()
  (interactive)
  (let* ((beg (point))
	 (end (point-min))
	 (text (buffer-extract-substring beg end)))
    (message "killed text: %s!!!" text)
    
    (if (eq last-command 'term-backward-kill-line)
	(kill-append text nil)
      (kill-new text)
      (if (> (length kill-ring) kill-ring-max)
	  (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
    (setq this-command 'term-backward-kill-line)
    (setq kill-ring-yank-pointer kill-ring)
    (term-send-raw)))

(defun term-kill-region ()
  (interactive)
  (let* ((beg (mark))
	 (end (point))
         (key (if (> end beg) "\C-b" "\C-f"))
	 (text (buffer-plain-substring beg end))
	 (tlist (string-to-list text)))
    (kill-new text)
    (term-send-raw-string "\C- ")
    (while tlist
      (term-send-raw-string key)
      (setq tlist (cdr tlist)))
    (term-send-raw-string "\C-h")))

(defun term-kill-ring-save (beg end)
  (interactive "r")
  (let ((text (buffer-plain-substring beg end)))
    (if (string= "" text)
	(message "Copied nothing.")
      (kill-new text))))

(defun send-to-term ()
  (interactive)
  (message "emacs-keys: raw")
  (define-key term-raw-map (kbd "C-x") 'term-send-raw)
  (define-key term-raw-map (kbd "C-z") 'term-send-raw))

(defun send-to-emacs ()
  (interactive)
  (message "emacs-keys: default")
  (define-key term-raw-map (kbd "C-x") 'Control-X-prefix)
  (define-key term-raw-map (kbd "C-z") 'suspend-frame))
;  (substitute-key-definition 'find-file 'term-find-file term-raw-map global-map))

(defun term-keystroke-p ()
  (interactive)
  (eq 'term-send-raw (lookup-key term-raw-map (kbd "C-x"))))

(defun toggle-keystrokes ()
  (interactive)
  (if (not (term-keystroke-p))
      (send-to-term)
    (send-to-emacs)))

(lookup-key global-map (kbd "C-x"))
(lookup-key term-raw-map (kbd "C-x"))
(lookup-key global-map (kbd "C-x C-f"))
(lookup-key term-raw-map (kbd "C-x C-f"))

;(defun toggle-keystrokes ()
;  (interactive)
;  (if (term-keystroke-p)
;      (send-to-term)
;    (send-to-emacs)))

;(defun send-to-term ()
;  (interactive)
;  (message "emacs-keys: raw")
;  (setq term-unbind-key-list (delete "C-x" term-unbind-key-list))
;  (setq term-unbind-key-list (delete "C-z" term-unbind-key-list))
;  (add-to-list 'term-bind-key-alist '("C-x" . term-send-raw))
;  (add-to-list 'term-bind-key-alist '("C-z" . term-send-raw)))
;
;(defun send-to-emacs ()
;  (interactive)
;  (message "emacs-keys: default")
;  (setq term-bind-key-alist (delete '("C-x" . term-send-raw) term-bind-key-alist))
;  (setq term-bind-key-alist (delete '("C-z" . term-send-raw) term-bind-key-alist))
;  (add-to-list 'term-unbind-key-list "C-x")
;  (add-to-list 'term-unbind-key-list "C-z"))
;
;(defun term-keystroke-p ()
;  (interactive)
;  (and (member "C-x" term-unbind-key-list)
;       (member "C-z" term-unbind-key-list)))

;(member "C-x" term-unbind-key-list)
;(member "C-z" term-unbind-key-list)
;
;(member '("C-x" . term-send-raw) term-bind-key-alist)
;(member '("C-z" . term-send-raw) term-bind-key-alist)
;
;(member '("C-x" . Control-X-prefix) term-bind-key-alist)
;(member '("C-z" . suspend-frame) term-bind-key-alist)
;
;(defun toggle-keystrokes ()
;  (interactive)
;  (if (term-keystroke-p)
;      (send-to-term)
;    (send-to-emacs)))

;(defun toggle-keystrokes ()
;  (interactive)
;  (if (term-key-type-p)
;      (send-to-emacs)
;    (send-to-term)))

(defun term-find-file ()
  (interactive)
  (let ((dir (concat (extract-current-filepath (point) (point-min)) "/")))
    (find-file (read-file-name "Find File: " dir))))

;(defun setup-term-keystrokes ()
;  (interactive)
;  (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)
;  (define-key term-raw-map (kbd "C-c C-k") 'term-char-mode))
;(add-hook 'term-mode-hook 'setup-term-keystrokes)

(add-hook 'term-mode-hook '(lambda ()
			     (define-key term-raw-map (kbd "C-c C-j") 'term-line-mode)
			     (define-key term-raw-map (kbd "C-c C-k") 'term-char-mode)
			     (substitute-key-definition 'find-file 'term-find-file term-raw-map global-map)))

(advice-add 'term-line-mode :before '(lambda () (message "term-line-mode")))
(advice-add 'term-char-mode :before '(lambda () (message "term-char-mode")))
(define-key term-raw-map (kbd "C-;") 'toggle-keystrokes)

;;(define-key term-raw-map (kbd "s-n") 'scroll-up)
;;(define-key term-raw-map (kbd "s-p") 'scroll-down)
(define-key term-raw-map (kbd "s-n") 'scroll-up-command)
(define-key term-raw-map (kbd "s-p") 'scroll-down-command)
(define-key term-raw-map (kbd "C-k") 'term-kill-line)
(define-key term-raw-map (kbd "C-u") 'term-backward-kill-line)
(define-key term-raw-map (kbd "M-w") 'term-kill-ring-save)
(define-key term-raw-map (kbd "C-w") 'term-kill-region)

;; Newline(\n) after the below first quotation is necessary.
;; "Not enough arguments for format string" error occurs otherwise.
(defhydra sh4hack-menu (:exit t :color pink :hint nil)
  "

 ######  ##     ## ##        ##     ##    ###     ######  ##    ## 
##    ## ##     ## ##    ##  ##     ##   ## ##   ##    ## ##   ##  
##       ##     ## ##    ##  ##     ##  ##   ##  ##       ##  ##   
 ######  ######### ##    ##  ######### ##     ## ##       #####    
      ## ##     ## ######### ##     ## ######### ##       ##  ##   
##    ## ##     ##       ##  ##     ## ##     ## ##    ## ##   ##  
 ######  ##     ##       ##  ##     ## ##     ##  ######  ##    ## 

               ^Metasploit^               |              ^Shell^               |      ^Others        
^^^^^^^^----------------------------------------------------------------------------------------------
       ^Linux^       |       ^Windows^      |       ^SSH^      |     ^Normal^      |      ******
^^^^^^^^----------------------------------------------------------------------------------------------
 _l_: x64-staged     |  _w_: x64-staged     |  _p_: password   |  _n_: netcat      |  _i_: info
 _L_: x64-stageless  |  _W_: x64-stageless  |  _P_: publickey  |  _s_: socat       |  _I_: inspect
 _m_: x86-staged     |  _x_: x86-staged     | ^ ^              | ^ ^               |  _r_: register
 _M_: x86-stageless  |  _X_: x86-stageless  | ^ ^              | ^ ^               |  _e_: edit
 ^ ^                 | ^ ^                  | ^ ^              | ^ ^               |  _q_: quit

"
  ("l" (msf-linux "x64" "staged"))
  ("L" (msf-linux "x64" "stageless"))
  ("m" (msf-linux "x86" "staged"))
  ("M" (msf-linux "x86" "stageless"))
  ("w" nil)
  ("W" nil)
  ("x" nil)
  ("X" nil)
  ("p" auth-with-password)
  ("P" auth-with-public-key)
  ("n" upgrade-netcat)
  ("s" connect-with-socat)
  ("i" get-info)
  ("I" inspect-server)
  ("r" register-info)
  ("e" edit-remote-file)
  ("q" nil))

(global-set-key (kbd "C-c s h") 'sh4hack-menu/body)

(provide 'sh4hack-keybinds)
